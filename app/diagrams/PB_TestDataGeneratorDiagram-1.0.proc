<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:actormapping="http://www.bonitasoft.org/ns/actormapping/6.0" xmlns:configuration="http://www.bonitasoft.org/ns/bpm/configuration" xmlns:connectorconfiguration="http://www.bonitasoft.org/model/connector/configuration" xmlns:decision="http://www.bonitasoft.org/ns/bpm/process/decision" xmlns:definition="http://www.bonitasoft.org/ns/connector/definition/6.1" xmlns:expression="http://www.bonitasoft.org/ns/bpm/expression" xmlns:notation="http://www.eclipse.org/gmf/runtime/1.0.3/notation" xmlns:process="http://www.bonitasoft.org/ns/bpm/process">
  <process:MainProcess xmi:id="_vGDzAHEJEfCzXNzD7sOrXA" documentation="A visual map showing the structure of the master data. It illustrates the relationships between master tables and how they connect to other data models in the system." name="PB_TestDataGeneratorDiagram" bonitaModelVersion="8">
    <elements xmi:type="process:Pool" xmi:id="_vGDzAXEJEfCzXNzD7sOrXA" documentation="Stores and manages information in master tables. These tables contain static or reference data crucial for the application's operation, like lists of countries, currencies, or user roles." name="PB_TestDataGenerator">
      <elements xmi:type="process:Lane" xmi:id="_vGDzAnEJEfCzXNzD7sOrXA" name="Employee lane" actor="_vGDzG3EJEfCzXNzD7sOrXA">
        <elements xmi:type="process:StartEvent" xmi:id="_vGDzA3EJEfCzXNzD7sOrXA" name="Start MasterDataStore" outgoing="_vGDzGHEJEfCzXNzD7sOrXA">
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_vGDzBHEJEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_vGDzBXEJEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_vGDzBnEJEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
        </elements>
        <elements xmi:type="process:EndTerminatedEvent" xmi:id="_zHL2YHEaEfCzXNzD7sOrXA" name="End MasterDataStore" incoming="_1d-toHElEfCzXNzD7sOrXA">
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_zHL2YnEaEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_zHL2YXEaEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_zHL2Y3EaEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
        </elements>
        <elements xmi:type="process:ServiceTask" xmi:id="_6wyZIHEnEfCzXNzD7sOrXA" name="Load MstGenericEntry" outgoing="_1d-toHElEfCzXNzD7sOrXA" incoming="_vGDzGHEJEfCzXNzD7sOrXA">
          <dynamicLabel xmi:type="expression:Expression" xmi:id="_1d51IXElEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <dynamicDescription xmi:type="expression:Expression" xmi:id="_1d51IHElEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <stepSummary xmi:type="expression:Expression" xmi:id="_1d51InElEfCzXNzD7sOrXA" name="" content="" returnTypeFixed="true"/>
          <connectors xmi:type="process:Connector" xmi:id="_U9IRkHElEfCzXNzD7sOrXA" documentation="Initializes and updates MstGenericEntry business objects using an &quot;upsert&quot; logic. It processes a predefined configuration map to create new entries if they don't exist, or update them if they do, ensuring master data integrity." name="Initialize MstGenericEntry" definitionId="scripting-groovy-script" event="ON_ENTER" definitionVersion="1.0.1">
            <configuration xmi:type="connectorconfiguration:ConnectorConfiguration" xmi:id="_U9IRkXElEfCzXNzD7sOrXA" definitionId="scripting-groovy-script" version="1.0.1" modelVersion="8">
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_U9IRknElEfCzXNzD7sOrXA" key="script">
                <expression xmi:type="expression:Expression" xmi:id="_U9IRk3ElEfCzXNzD7sOrXA" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_U9IRlHElEfCzXNzD7sOrXA" key="variables">
                <expression xmi:type="expression:Expression" xmi:id="_U9IRlXElEfCzXNzD7sOrXA" returnType="java.util.List" returnTypeFixed="true"/>
              </parameters>
              <parameters xmi:type="connectorconfiguration:ConnectorParameter" xmi:id="_U9IRlnElEfCzXNzD7sOrXA" key="fakeScriptExpression">
                <expression xmi:type="expression:Expression" xmi:id="_U9IRl3ElEfCzXNzD7sOrXA" name="init_connector_MstGenericEntry()" content="import java.time.OffsetDateTime;&#xD;&#xA;import java.util.AbstractMap.SimpleEntry&#xD;&#xA;import java.util.ArrayList;&#xD;&#xA;import java.util.List;&#xD;&#xA;import java.util.stream.Collectors&#xD;&#xA;import java.util.Collections;&#xD;&#xA;&#xD;&#xA;import org.bonitasoft.engine.identity.User;&#xD;&#xA;import org.bonitasoft.engine.identity.UserNotFoundException;&#xD;&#xA;import org.bonitasoft.engine.bpm.process.ProcessInstance;&#xD;&#xA;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstGenericEntry;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstGenericEntryDAO;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstEntityType;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstEntityTypeDAO;&#xD;&#xA;&#xD;&#xA;import org.slf4j.Logger;&#xD;&#xA;import org.slf4j.LoggerFactory;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Script to initialize and load MstGenericEntry business objects for multiple&#xD;&#xA; * master data types based on a configuration map. This script performs an 'upsert'&#xD;&#xA; * operation for each entry defined in the map.&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;Logger logger = LoggerFactory.getLogger(&quot;org.bonitasoft.groovy.script.connector.init_connector_MstGenericEntry_generic&quot;);&#xD;&#xA;&#xD;&#xA;// Configuration map for the master data.&#xD;&#xA;Map&lt;String, List&lt;String>> entityConfigMap = Map.ofEntries(&#xD;&#xA;&#x9;new SimpleEntry&lt;>(&quot;processStatus&quot;, List.of(&#xD;&#xA;&#x9;&#x9;&quot;Running&quot;,&#xD;&#xA;&#x9;&#x9;&quot;Stopped&quot;,&#xD;&#xA;&#x9;&#x9;&quot;Archived&quot;,&#xD;&#xA;&#x9;&#x9;&quot;Scheduled&quot;&#xD;&#xA;&#x9;)),&#xD;&#xA;&#x9;new SimpleEntry&lt;>(&quot;caseStatus&quot;, List.of(&#xD;&#xA;&#x9;&#x9;&quot;Opened&quot;,&#xD;&#xA;&#x9;&#x9;&quot;Completed&quot;,&#xD;&#xA;&#x9;&#x9;&quot;In Progress&quot;,&#xD;&#xA;&#x9;&#x9;&quot;Cancelled&quot;&#xD;&#xA;&#x9;))&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;logger.info(&quot;Starting automatic initialization of MstGenericEntry business objects from configuration map.&quot;);&#xD;&#xA;&#xD;&#xA;List&lt;MstGenericEntry> listMstGenericEntry = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;// Determine the user who started the process.&#xD;&#xA;String creationUser = &quot;unknown_user&quot;;&#xD;&#xA;try {&#xD;&#xA;&#x9;logger.info(&quot;Attempting to retrieve the user who started the process instance ID: {}&quot;, processInstanceId);&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;ProcessInstance processInstance = apiAccessor.getProcessAPI().getProcessInstance(processInstanceId);&#xD;&#xA;&#x9;long startedByUserId = processInstance.getStartedBy();&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;User processInitiator = apiAccessor.getIdentityAPI().getUser(startedByUserId);&#xD;&#xA;&#x9;creationUser = processInitiator.getUserName();&#xD;&#xA;&#x9;logger.debug(&quot;Successfully retrieved initiator user: {}&quot;, creationUser);&#xD;&#xA;} catch (UserNotFoundException e) {&#xD;&#xA;&#x9;logger.warn(&quot;The user who started process instance ID {} was not found. Using 'system_user'.&quot;, processInstanceId, e);&#xD;&#xA;&#x9;creationUser = &quot;system_user&quot;;&#xD;&#xA;} catch (Exception e) {&#xD;&#xA;&#x9;logger.error(&quot;An unexpected error occurred while retrieving the process initiator for process instance ID {}: {}&quot;, processInstanceId, e.getMessage(), e);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Main loop that iterates through the master data types in the map (e.g., &quot;status&quot;, &quot;action&quot;)&#xD;&#xA;//entityConfigMap.each { masterDataType, masterDataEntries ->&#xD;&#xA;return entityConfigMap.entrySet().stream()&#xD;&#xA;.flatMap { Map.Entry entry ->&#xD;&#xA;&#x9;String masterDataType = entry.getKey();&#xD;&#xA;&#x9;List&lt;String> masterDataEntries = entry.getValue();&#xD;&#xA;&#x9;logger.info(&quot;Processing master data for typeProcessing master data for type: '{}'&quot;, masterDataType);&#xD;&#xA;&#x9;logger.info(&quot;Processing master data for typeProcessing master data for values: '{}'&quot;, masterDataEntries.toString());&#xD;&#xA;&#xD;&#xA;&#x9;// Find the parent MstEntityType for the current type&#xD;&#xA;&#x9;MstEntityType mstEntityType = null;&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;//mstEntityType = mstEntityTypeDAO.findByFullName(masterDataType);&#xD;&#xA;&#x9;&#x9;//mstEntityType = boMstEntityType.find { it.fullName == masterDataType };&#xD;&#xA;&#x9;&#x9;mstEntityType = boMstEntityType.stream()&#xD;&#xA;&#x9;&#x9;.filter{ MstEntityType e -> e.getFullName().equals(masterDataType) }&#xD;&#xA;&#x9;&#x9;.findFirst()&#xD;&#xA;&#x9;&#x9;.orElse(null);&#xD;&#xA;&#x9;} catch (Exception e) {&#xD;&#xA;&#x9;&#x9;logger.error(&quot;An error occurred while trying to find MstEntityType with fullName '{}': {}&quot;, masterDataType, e.getMessage(), e);&#xD;&#xA;&#x9;&#x9;logger.error(&quot;Cannot proceed with creating generic entries for this type. Skipping this entry in the map.&quot;);&#xD;&#xA;&#x9;&#x9;return; // 'return' in a Groovy closure jumps to the next iteration&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;if (mstEntityType == null) {&#xD;&#xA;&#x9;&#x9;logger.error(&quot;MstEntityType with fullName '{}' not found. Cannot proceed with creating generic entries. Skipping this entry in the map.&quot;, masterDataType);&#xD;&#xA;&#x9;&#x9;return; // Skip to the next map entry&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;logger.info(&quot;Found MstEntityType with fullName '{}'. ID: {}&quot;, masterDataType, mstEntityType.getPersistenceId());&#xD;&#xA;&#xD;&#xA;&#x9;// Nested loop that iterates through each entry within the current master data type&#xD;&#xA;&#x9;// for (String entry : masterDataEntries) {&#xD;&#xA;&#x9;//List&lt;MstGenericEntry> processedEntriesForType = masterDataEntries.stream().map { String entry ->&#xD;&#xA;&#x9;return masterDataEntries.stream().map { entryName ->&#xD;&#xA;&#x9;&#x9;/**&#xD;&#xA;&#x9;&#x9; * Converts a string with spaces into camelCase format.&#xD;&#xA;&#x9;&#x9; * Example: &quot;In Progress&quot; -> &quot;inProgress&quot;&#xD;&#xA;&#x9;&#x9; */&#xD;&#xA;&#x9;&#x9;String fullName = &quot;&quot;;//convertToCamelCase(entry);&#xD;&#xA;&#x9;&#x9;if (entryName != null &amp;&amp; !entryName.isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;def words = entryName.tokenize(' ').findAll { it.trim() }&#xD;&#xA;&#x9;&#x9;&#x9;if (!words.isEmpty()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;def firstWord = words[0].toLowerCase()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;def remainingWords = words.size() > 1 ? words[1..-1].collect { it.capitalize() } : []&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;fullName = firstWord + remainingWords.join('');&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;logger.info(&quot;Processing entry: '{}' (camelCase: '{}')&quot;, entryName, fullName);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;MstGenericEntry mstGenericEntry = null;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;logger.info(&quot;Serching...: '{}')&quot;,  fullName);&#xD;&#xA;&#x9;&#x9;&#x9;//logger.info(&quot;boMstGenericEntryAll.size()...: '{}')&quot;,  boMstGenericEntryAll.size());&#xD;&#xA;&#x9;&#x9;&#x9;logger.info(&quot;Serching...: fullName'{}' - mstEntityType.persistenceId: '{}')&quot;,  fullName, mstEntityType.persistenceId);&#xD;&#xA;&#x9;&#x9;&#x9;// CORRECTION: Pass the MstEntityType object, not its ID.&#xD;&#xA;&#x9;&#x9;&#x9;Long refMstEntityTypeId = mstEntityType.persistenceId;&#xD;&#xA;&#x9;&#x9;&#x9;//mstGenericEntry = mstGenericEntryDAO.findByFullNameAndRefMstEntityTypeId(fullName, refMstEntityTypeId);&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry = boMstGenericEntryAll.stream()&#xD;&#xA;&#x9;&#x9;&#x9;.filter{ MstGenericEntry e -> (e.getFullName().equals(fullName) &amp;&amp; e.getRefMstEntityType().getPersistenceId().equals(mstEntityType.persistenceId)) }&#xD;&#xA;&#x9;&#x9;&#x9;.findFirst()&#xD;&#xA;&#x9;&#x9;&#x9;.orElse(null);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;} catch (Exception e) {&#xD;&#xA;&#x9;&#x9;&#x9;logger.error(&quot;Failed to search for existing MstGenericEntry with fullName '{}' and MstEntityType ID '{}': {}&quot;, fullName, mstEntityType.getPersistenceId(), e.getMessage(), e);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (mstGenericEntry != null) {&#xD;&#xA;&#x9;&#x9;&#x9;// If the entry exists, update it.&#xD;&#xA;&#x9;&#x9;&#x9;logger.info(&quot;An existing MstGenericEntry was found for fullName '{}'. Updating the record.&quot;, fullName);&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.auModificationDate = OffsetDateTime.now();&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.auModificationUser = creationUser;&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.displayName = entryName;&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.shortDescription = &quot;A master table entry for the &quot; + masterDataType + &quot;: &quot; + entryName;&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;// If the entry does not exist, create a new one.&#xD;&#xA;&#x9;&#x9;&#x9;logger.info(&quot;No MstGenericEntry found for fullName '{}'. Creating a new record.&quot;, fullName);&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry = new MstGenericEntry();&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.refMstEntityType = mstEntityType;&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.fullName = fullName;&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.displayName = entryName;&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.shortDescription = &quot;A master table entry for the &quot; + masterDataType + &quot;: &quot; + entryName;&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.auCreationDate = OffsetDateTime.now();&#xD;&#xA;&#x9;&#x9;&#x9;mstGenericEntry.auCreationUser = creationUser;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;logger.info(&quot; ************************ mstGenericEntry '{}'&quot;, mstGenericEntry.toString());&#xD;&#xA;&#x9;&#x9; return mstGenericEntry;&#xD;&#xA;&#x9;&#x9;};&#xD;&#xA;&#x9;}.collect(Collectors.toList());&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.lang.Object" returnTypeFixed="true">
                  <referencedElements xmi:type="expression:Expression" xmi:id="_Ag01UHRuEfC_4I1JwXjZJQ" name="processInstanceId" content="processInstanceId" type="TYPE_ENGINE_CONSTANT" returnType="java.lang.Long"/>
                  <referencedElements xmi:type="expression:Expression" xmi:id="_Ag01UXRuEfC_4I1JwXjZJQ" name="apiAccessor" content="apiAccessor" type="TYPE_ENGINE_CONSTANT" returnType="com.bonitasoft.engine.api.APIAccessor"/>
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_Ag01UnRuEfC_4I1JwXjZJQ" name="boMstEntityType" multiple="true" dataType="_vGDzNHEJEfCzXNzD7sOrXA" className="com.bonitasoftprocessbuilder.model.master.MstEntityType"/>
                  <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_Ag01U3RuEfC_4I1JwXjZJQ" name="boMstGenericEntryAll" multiple="true" dataType="_vGDzNHEJEfCzXNzD7sOrXA" className="com.bonitasoftprocessbuilder.model.master.MstGenericEntry"/>
                </expression>
              </parameters>
            </configuration>
            <outputs xmi:type="expression:Operation" xmi:id="_U9IRnHElEfCzXNzD7sOrXA">
              <leftOperand xmi:type="expression:Expression" xmi:id="_U9IRnXElEfCzXNzD7sOrXA" name="boMstGenericEntry" content="boMstGenericEntry" type="TYPE_VARIABLE" returnType="java.util.List">
                <referencedElements xmi:type="process:BusinessObjectData" xmi:id="_U9IRnnElEfCzXNzD7sOrXA" name="boMstGenericEntry" multiple="true" dataType="_vGDzNHEJEfCzXNzD7sOrXA" className="com.bonitasoftprocessbuilder.model.master.MstGenericEntry"/>
              </leftOperand>
              <rightOperand xmi:type="expression:Expression" xmi:id="_U9IRn3ElEfCzXNzD7sOrXA" name="cast_result_to_MstGenericEntryList()" content="import java.util.List;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstGenericEntry;&#xD;&#xA;import org.slf4j.Logger;&#xD;&#xA;import org.slf4j.LoggerFactory;&#xD;&#xA;&#xD;&#xA;Logger logger = LoggerFactory.getLogger(&quot;org.bonitasoft.groovy.script.cast_result_to_MstGenericEntryList&quot;);&#xD;&#xA;&#xD;&#xA;try {&#xD;&#xA;    logger.info(&quot;Starting to cast connector output to a List&lt;MstGenericEntry>.&quot;);&#xD;&#xA;    &#xD;&#xA;    if (result == null) {&#xD;&#xA;        logger.warn(&quot;The connector's output 'result' is null. Returning an empty list to avoid errors.&quot;);&#xD;&#xA;        return new ArrayList&lt;MstGenericEntry>();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    // Attempt to cast the result to List&lt;MstGenericEntry>.&#xD;&#xA;    List&lt;MstGenericEntry> mstGenericEntryList = (List&lt;MstGenericEntry>) result;&#xD;&#xA;    &#xD;&#xA;    logger.info(&quot;Successfully mapped connector output. List contains {} elements.&quot;, mstGenericEntryList.size());&#xD;&#xA;    return mstGenericEntryList;&#xD;&#xA;&#xD;&#xA;} catch (Exception e) {&#xD;&#xA;    logger.error(&quot;An error occurred while mapping the connector output: {}&quot;, e.getMessage(), e);&#xD;&#xA;    // You can choose to throw an exception, return null, or return an empty list.&#xD;&#xA;    // Returning an empty list is often safer for process execution.&#xD;&#xA;    throw new RuntimeException(&quot;Failed to map connector output to a List&lt;MstGenericEntry>&quot;, e);&#xD;&#xA;}" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.util.List">
                <referencedElements xmi:type="definition:Output" xmi:id="_U9IRoHElEfCzXNzD7sOrXA" name="result" type="java.lang.Object"/>
              </rightOperand>
              <operator xmi:type="expression:Operator" xmi:id="_U9IRoXElEfCzXNzD7sOrXA" type="ASSIGNMENT"/>
            </outputs>
          </connectors>
          <loopCondition xmi:type="expression:Expression" xmi:id="_1d51I3ElEfCzXNzD7sOrXA" name="" content="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
          <loopMaximum xmi:type="expression:Expression" xmi:id="_1d51JHElEfCzXNzD7sOrXA" name="" content="" returnType="java.lang.Integer" returnTypeFixed="true"/>
          <cardinalityExpression xmi:type="expression:Expression" xmi:id="_1d51JXElEfCzXNzD7sOrXA" name="" content="" returnType="java.lang.Integer" returnTypeFixed="true"/>
          <iteratorExpression xmi:type="expression:Expression" xmi:id="_1d51J3ElEfCzXNzD7sOrXA" name="multiInstanceIterator" content="multiInstanceIterator" type="MULTIINSTANCE_ITERATOR_TYPE" returnType="java.lang.Object" returnTypeFixed="true"/>
          <completionCondition xmi:type="expression:Expression" xmi:id="_1d51JnElEfCzXNzD7sOrXA" name="" content="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
        </elements>
      </elements>
      <data xmi:type="process:BusinessObjectData" xmi:id="_Dso60HEdEfCzXNzD7sOrXA" name="boMstGenericEntry" multiple="true" dataType="_vGDzNHEJEfCzXNzD7sOrXA" className="com.bonitasoftprocessbuilder.model.master.MstGenericEntry">
        <defaultValue xmi:type="expression:Expression" xmi:id="_Dso60XEdEfCzXNzD7sOrXA" name="init_boMstGenericEntry()" content="''" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.util.List"/>
      </data>
      <data xmi:type="process:BusinessObjectData" xmi:id="_IGhsMHEdEfCzXNzD7sOrXA" name="boMstEntityType" multiple="true" dataType="_vGDzNHEJEfCzXNzD7sOrXA" className="com.bonitasoftprocessbuilder.model.master.MstEntityType">
        <defaultValue xmi:type="expression:Expression" xmi:id="_IGhsMXEdEfCzXNzD7sOrXA" name="init_boMstEntityType()" content="import java.time.OffsetDateTime;&#xD;&#xA;import java.util.ArrayList;&#xD;&#xA;import java.util.Collections;&#xD;&#xA;import java.util.HashMap;&#xD;&#xA;import java.util.List;&#xD;&#xA;import java.util.Map;&#xD;&#xA;&#xD;&#xA;import org.bonitasoft.engine.identity.User;&#xD;&#xA;import org.bonitasoft.engine.identity.UserNotFoundException;&#xD;&#xA;import org.bonitasoft.engine.bpm.process.ProcessInstance;&#xD;&#xA;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstEntityType;&#xD;&#xA;import com.bonitasoftprocessbuilder.model.master.MstEntityTypeDAO;&#xD;&#xA;&#xD;&#xA;import java.util.AbstractMap.SimpleEntry;&#xD;&#xA;&#xD;&#xA;import org.slf4j.Logger;&#xD;&#xA;import org.slf4j.LoggerFactory;&#xD;&#xA;&#xD;&#xA;/**&#xD;&#xA; * Script to handle the creation or update of MstEntityType business objects based on a configuration map.&#xD;&#xA; * This script performs an 'upsert' operation for each entry in the map: it updates the record&#xD;&#xA; * if it already exists, and creates a new one otherwise.&#xD;&#xA; */&#xD;&#xA;&#xD;&#xA;Logger logger = LoggerFactory.getLogger(&quot;org.bonitasoft.groovy.script.init_boMstEntityType&quot;);&#xD;&#xA;logger.info(&quot;Starting upsert operation for MstEntityType business objects from configuration map.&quot;);&#xD;&#xA;&#xD;&#xA;// Configuration map for the entities.&#xD;&#xA;// Key: fullName (in lowercase)&#xD;&#xA;// Value: A map with additional properties like the description.&#xD;&#xA;Map&lt;String, Map&lt;String, String>> entityConfigMap = Map.ofEntries(&#xD;&#xA;&#x9;new SimpleEntry&lt;>(&quot;processStatus&quot;, Map.of(&quot;description&quot;, &quot;A master table entity representing different process statuses.&quot;)),&#xD;&#xA;&#x9;new SimpleEntry&lt;>(&quot;caseStatus&quot;, Map.of(&quot;description&quot;, &quot;A master table entity representing different case statuses.&quot;)),&#xD;&#xA;);&#xD;&#xA;&#xD;&#xA;String creationUser = &quot;unknown_user&quot;;&#xD;&#xA;try {&#xD;&#xA;&#x9;logger.info(&quot;Attempting to retrieve the user who started the process instance ID: {}&quot;, processInstanceId);&#xD;&#xA;&#x9;ProcessInstance processInstance = apiAccessor.getProcessAPI().getProcessInstance(processInstanceId);&#xD;&#xA;&#x9;long startedByUserId = processInstance.getStartedBy();&#xD;&#xA;&#x9;User processInitiator = apiAccessor.getIdentityAPI().getUser(startedByUserId);&#xD;&#xA;&#x9;creationUser = processInitiator.getUserName();&#xD;&#xA;&#x9;logger.debug(&quot;Successfully retrieved initiator user: {}&quot;, creationUser);&#xD;&#xA;} catch (UserNotFoundException e) {&#xD;&#xA;&#x9;logger.warn(&quot;The user who started process instance ID {} was not found. Using 'system_user'.&quot;, processInstanceId, e);&#xD;&#xA;&#x9;creationUser = &quot;system_user&quot;;&#xD;&#xA;} catch (Exception e) {&#xD;&#xA;&#x9;logger.error(&quot;An unexpected error occurred while retrieving the process initiator for process instance ID {}: {}&quot;, processInstanceId, e.getMessage(), e);&#xD;&#xA;&#x9;creationUser = &quot;unknown_user&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;List&lt;MstEntityType> processedEntities = new ArrayList&lt;>();&#xD;&#xA;&#xD;&#xA;// Loop to process each entry in the configuration map.&#xD;&#xA;entityConfigMap.each { entityFullName, entityData ->&#xD;&#xA;&#x9;logger.info(&quot;Processing MstEntityType with fullName: '{}'&quot;, entityFullName);&#xD;&#xA;&#xD;&#xA;&#x9;// Search for the MstEntityType by its 'fullName'.&#xD;&#xA;&#x9;MstEntityType mstEntityType = mstEntityTypeDAO.findByFullName(entityFullName);&#xD;&#xA;&#xD;&#xA;&#x9;// Convert the fullName to a capitalized displayName.&#xD;&#xA;&#x9;String displayName = entityFullName.substring(0, 1).toUpperCase() + entityFullName.substring(1).toLowerCase();&#xD;&#xA;&#xD;&#xA;&#x9;if (mstEntityType != null) {&#xD;&#xA;&#x9;&#x9;// The object already exists, so we update it.&#xD;&#xA;&#x9;&#x9;logger.info(&quot;MstEntityType with fullName '{}' already exists. Updating the record.&quot;, entityFullName);&#xD;&#xA;&#x9;&#x9;mstEntityType.auModificationDate = OffsetDateTime.now();&#xD;&#xA;&#x9;&#x9;mstEntityType.auModificationUser = creationUser;&#xD;&#xA;&#x9;&#x9;mstEntityType.displayName = displayName;&#xD;&#xA;&#x9;&#x9;mstEntityType.shortDescription = entityData.description;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;// The object does not exist, so we create a new one.&#xD;&#xA;&#x9;&#x9;logger.info(&quot;MstEntityType with fullName '{}' not found. Creating a new record.&quot;, entityFullName);&#xD;&#xA;&#x9;&#x9;mstEntityType = new MstEntityType();&#xD;&#xA;&#x9;&#x9;mstEntityType.fullName = entityFullName;&#xD;&#xA;&#x9;&#x9;mstEntityType.displayName = displayName;&#xD;&#xA;&#x9;&#x9;mstEntityType.shortDescription = entityData.description;&#xD;&#xA;&#x9;&#x9;mstEntityType.auCreationDate = OffsetDateTime.now();&#xD;&#xA;&#x9;&#x9;mstEntityType.auCreationUser = creationUser;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;processedEntities.add(mstEntityType);&#xD;&#xA;&#x9;logger.info(&quot;Completed upsert for MstEntityType: '{}'&quot;, entityFullName);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;logger.info(&quot;Completed upsert operation for all MstEntityType business objects.&quot;);&#xD;&#xA;&#xD;&#xA;return processedEntities;" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.util.List">
          <referencedElements xmi:type="expression:Expression" xmi:id="_tHxOkHRwEfC_4I1JwXjZJQ" name="processInstanceId" content="processInstanceId" type="TYPE_ENGINE_CONSTANT" returnType="java.lang.Long"/>
          <referencedElements xmi:type="expression:Expression" xmi:id="_tHxOkXRwEfC_4I1JwXjZJQ" name="apiAccessor" content="apiAccessor" type="TYPE_ENGINE_CONSTANT" returnType="com.bonitasoft.engine.api.APIAccessor"/>
          <referencedElements xmi:type="expression:Expression" xmi:id="_tHxOknRwEfC_4I1JwXjZJQ" name="mstEntityTypeDAO" content="mstEntityTypeDAO" type="TYPE_BUSINESS_OBJECT_DAO" returnType="com.bonitasoftprocessbuilder.model.master.MstEntityTypeDAO" returnTypeFixed="true"/>
        </defaultValue>
      </data>
      <data xmi:type="process:BusinessObjectData" xmi:id="_fJlS8HEvEfCzXNzD7sOrXA" name="boMstGenericEntryAll" multiple="true" dataType="_vGDzNHEJEfCzXNzD7sOrXA" className="com.bonitasoftprocessbuilder.model.master.MstGenericEntry">
        <defaultValue xmi:type="expression:Expression" xmi:id="_fJlS8XEvEfCzXNzD7sOrXA" name="init_boMstGenericEntryAll()" content="import org.slf4j.Logger;&#xD;&#xA;import org.slf4j.LoggerFactory;&#xD;&#xA;&#xD;&#xA;Logger logger = LoggerFactory.getLogger(&quot;org.bonitasoft.groovy.script.init_boMstGenericEntryAll&quot;);&#xD;&#xA;logger.info(&quot;Retrieving all MstGenericEntry business objects from the database.&quot;);&#xD;&#xA;&#xD;&#xA;return mstGenericEntryDAO.find(0, Integer.MAX_VALUE);" interpreter="GROOVY" type="TYPE_READ_ONLY_SCRIPT" returnType="java.util.List">
          <referencedElements xmi:type="expression:Expression" xmi:id="_3siEUHEvEfCzXNzD7sOrXA" name="mstGenericEntryDAO" content="mstGenericEntryDAO" type="TYPE_BUSINESS_OBJECT_DAO" returnType="com.bonitasoftprocessbuilder.model.master.MstGenericEntryDAO" returnTypeFixed="true"/>
        </defaultValue>
      </data>
      <formMapping xmi:type="process:FormMapping" xmi:id="_vGDzFHEJEfCzXNzD7sOrXA" type="NONE">
        <targetForm xmi:type="expression:Expression" xmi:id="_LT9IIHE2EfCzXNzD7sOrXA" name="" content="" type="FORM_REFERENCE_TYPE" returnTypeFixed="true"/>
      </formMapping>
      <overviewFormMapping xmi:type="process:FormMapping" xmi:id="_vGDzFnEJEfCzXNzD7sOrXA" type="NONE">
        <targetForm xmi:type="expression:Expression" xmi:id="_vGDzF3EJEfCzXNzD7sOrXA" name="" content="" type="FORM_REFERENCE_TYPE" returnTypeFixed="true"/>
      </overviewFormMapping>
      <connections xmi:type="process:SequenceFlow" xmi:id="_vGDzGHEJEfCzXNzD7sOrXA" target="_6wyZIHEnEfCzXNzD7sOrXA" source="_vGDzA3EJEfCzXNzD7sOrXA">
        <decisionTable xmi:type="decision:DecisionTable" xmi:id="_vGDzGXEJEfCzXNzD7sOrXA"/>
        <condition xmi:type="expression:Expression" xmi:id="_vGDzGnEJEfCzXNzD7sOrXA" name="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
      </connections>
      <connections xmi:type="process:SequenceFlow" xmi:id="_1d-toHElEfCzXNzD7sOrXA" target="_zHL2YHEaEfCzXNzD7sOrXA" source="_6wyZIHEnEfCzXNzD7sOrXA">
        <decisionTable xmi:type="decision:DecisionTable" xmi:id="_1d-toXElEfCzXNzD7sOrXA"/>
        <condition xmi:type="expression:Expression" xmi:id="_1d-tonElEfCzXNzD7sOrXA" name="" returnType="java.lang.Boolean" returnTypeFixed="true"/>
      </connections>
      <actors xmi:type="process:Actor" xmi:id="_vGDzG3EJEfCzXNzD7sOrXA" documentation="This is an example of actor that is mapped to any ACME users" name="Employee actor" initiator="true"/>
      <configurations xmi:type="configuration:Configuration" xmi:id="_KX8zAHIfEfC_4I1JwXjZJQ" name="presales" version="8" username="walter.bates">
        <actorMappings xmi:type="actormapping:ActorMappingsType" xmi:id="_KX8zAXIfEfC_4I1JwXjZJQ">
          <actorMapping xmi:type="actormapping:ActorMapping" xmi:id="_KX8zAnIfEfC_4I1JwXjZJQ" name="Employee actor">
            <groups xmi:type="actormapping:Groups" xmi:id="_KX8zA3IfEfC_4I1JwXjZJQ">
              <group>/acme</group>
            </groups>
            <memberships xmi:type="actormapping:Membership" xmi:id="_KX8zBHIfEfC_4I1JwXjZJQ"/>
            <roles xmi:type="actormapping:Roles" xmi:id="_KX8zBXIfEfC_4I1JwXjZJQ"/>
            <users xmi:type="actormapping:Users" xmi:id="_KX8zBnIfEfC_4I1JwXjZJQ"/>
          </actorMapping>
        </actorMappings>
        <definitionMappings xmi:type="configuration:DefinitionMapping" xmi:id="_IZNvwHNvEfC_4I1JwXjZJQ" type="CONNECTOR" definitionId="scripting-groovy-script" definitionVersion="1.0.1" implementationId="scripting-groovy-script-impl" implementationVersion="1.1.4"/>
        <processDependencies xmi:type="configuration:FragmentContainer" xmi:id="_IU8TwHNvEfC_4I1JwXjZJQ" id="CONNECTOR">
          <children xmi:type="configuration:FragmentContainer" xmi:id="_IbaIIHNvEfC_4I1JwXjZJQ" id="scripting-groovy-script-impl-1.1.4">
            <fragments xmi:type="configuration:Fragment" xmi:id="_IbfAoHNvEfC_4I1JwXjZJQ" key="scripting-groovy-script-impl -- 1.1.4" value="bonita-connector-groovy-1.1.4.jar" type="CONNECTOR"/>
          </children>
        </processDependencies>
        <processDependencies xmi:type="configuration:FragmentContainer" xmi:id="_IU8TwXNvEfC_4I1JwXjZJQ" id="GROOVY_SCRIPT"/>
        <processDependencies xmi:type="configuration:FragmentContainer" xmi:id="_IU8Tw3NvEfC_4I1JwXjZJQ" id="ACTOR_FILTER"/>
        <processDependencies xmi:type="configuration:FragmentContainer" xmi:id="_IU8TxHNvEfC_4I1JwXjZJQ" id="OTHER"/>
        <applicationDependencies xmi:type="configuration:FragmentContainer" xmi:id="_IU8TwnNvEfC_4I1JwXjZJQ" id="GROOVY_SCRIPT"/>
      </configurations>
      <configurations xmi:type="configuration:Configuration" xmi:id="_XxFXUHIfEfC_4I1JwXjZJQ" name="ProfessionalServices" version="8">
        <actorMappings xmi:type="actormapping:ActorMappingsType" xmi:id="_XxFXUXIfEfC_4I1JwXjZJQ">
          <actorMapping xmi:type="actormapping:ActorMapping" xmi:id="_XxFXUnIfEfC_4I1JwXjZJQ" name="Employee actor">
            <groups xmi:type="actormapping:Groups" xmi:id="_XxFXU3IfEfC_4I1JwXjZJQ">
              <group>/acme</group>
            </groups>
            <memberships xmi:type="actormapping:Membership" xmi:id="_XxFXVHIfEfC_4I1JwXjZJQ"/>
            <roles xmi:type="actormapping:Roles" xmi:id="_XxFXVXIfEfC_4I1JwXjZJQ"/>
            <users xmi:type="actormapping:Users" xmi:id="_XxFXVnIfEfC_4I1JwXjZJQ"/>
          </actorMapping>
        </actorMappings>
      </configurations>
      <contract xmi:type="process:Contract" xmi:id="_vGDzHHEJEfCzXNzD7sOrXA"/>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_vGDzHXEJEfCzXNzD7sOrXA">
        <name xmi:type="expression:Expression" xmi:id="_vGDzHnEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_vGDzH3EJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_vGDzIHEJEfCzXNzD7sOrXA">
        <name xmi:type="expression:Expression" xmi:id="_vGDzIXEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_vGDzInEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_vGDzI3EJEfCzXNzD7sOrXA">
        <name xmi:type="expression:Expression" xmi:id="_vGDzJHEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_vGDzJXEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_vGDzJnEJEfCzXNzD7sOrXA">
        <name xmi:type="expression:Expression" xmi:id="_vGDzJ3EJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_vGDzKHEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
      </searchIndexes>
      <searchIndexes xmi:type="process:SearchIndex" xmi:id="_vGDzKXEJEfCzXNzD7sOrXA">
        <name xmi:type="expression:Expression" xmi:id="_vGDzKnEJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
        <value xmi:type="expression:Expression" xmi:id="_vGDzK3EJEfCzXNzD7sOrXA" content="" returnTypeFixed="true"/>
      </searchIndexes>
    </elements>
    <datatypes xmi:type="process:BooleanType" xmi:id="_vGDzLHEJEfCzXNzD7sOrXA" name="Boolean"/>
    <datatypes xmi:type="process:DateType" xmi:id="_vGDzLXEJEfCzXNzD7sOrXA" name="Date"/>
    <datatypes xmi:type="process:IntegerType" xmi:id="_vGDzLnEJEfCzXNzD7sOrXA" name="Integer"/>
    <datatypes xmi:type="process:LongType" xmi:id="_vGDzL3EJEfCzXNzD7sOrXA" name="Long"/>
    <datatypes xmi:type="process:DoubleType" xmi:id="_vGDzMHEJEfCzXNzD7sOrXA" name="Double"/>
    <datatypes xmi:type="process:StringType" xmi:id="_vGDzMXEJEfCzXNzD7sOrXA" name="Text"/>
    <datatypes xmi:type="process:JavaType" xmi:id="_vGDzMnEJEfCzXNzD7sOrXA" name="Java_object"/>
    <datatypes xmi:type="process:XMLType" xmi:id="_vGDzM3EJEfCzXNzD7sOrXA" name="XML"/>
    <datatypes xmi:type="process:BusinessObjectType" xmi:id="_vGDzNHEJEfCzXNzD7sOrXA" name="Business_Object"/>
  </process:MainProcess>
  <notation:Diagram xmi:id="_vGDzNXEJEfCzXNzD7sOrXA" type="Process" element="_vGDzAHEJEfCzXNzD7sOrXA" name="MyDiagram" measurementUnit="Pixel">
    <children xmi:type="notation:Node" xmi:id="_vGDzNnEJEfCzXNzD7sOrXA" type="2007" element="_vGDzAXEJEfCzXNzD7sOrXA">
      <children xmi:type="notation:DecorationNode" xmi:id="_vGDzN3EJEfCzXNzD7sOrXA" type="5008"/>
      <children xmi:type="notation:DecorationNode" xmi:id="_vGDzOHEJEfCzXNzD7sOrXA" type="7001">
        <children xmi:type="notation:Node" xmi:id="_vGDzOXEJEfCzXNzD7sOrXA" type="3007" element="_vGDzAnEJEfCzXNzD7sOrXA">
          <children xmi:type="notation:DecorationNode" xmi:id="_vGDzOnEJEfCzXNzD7sOrXA" type="5007"/>
          <children xmi:type="notation:DecorationNode" xmi:id="_vGDzO3EJEfCzXNzD7sOrXA" type="7002">
            <children xmi:type="notation:Shape" xmi:id="_vGDzP3EJEfCzXNzD7sOrXA" type="3002" element="_vGDzA3EJEfCzXNzD7sOrXA" fontName="Segoe UI">
              <children xmi:type="notation:DecorationNode" xmi:id="_vGDzQHEJEfCzXNzD7sOrXA" type="5024">
                <layoutConstraint xmi:type="notation:Location" xmi:id="_vGDzQXEJEfCzXNzD7sOrXA" y="5"/>
              </children>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_vGDzQnEJEfCzXNzD7sOrXA" x="89" y="54"/>
            </children>
            <children xmi:type="notation:Shape" xmi:id="_zHMdcHEaEfCzXNzD7sOrXA" type="3062" element="_zHL2YHEaEfCzXNzD7sOrXA" fontName="Segoe UI">
              <children xmi:type="notation:DecorationNode" xmi:id="_zHMdcnEaEfCzXNzD7sOrXA" type="5090">
                <layoutConstraint xmi:type="notation:Location" xmi:id="_zHMdc3EaEfCzXNzD7sOrXA" y="5"/>
              </children>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_zHMdcXEaEfCzXNzD7sOrXA" x="612" y="54"/>
            </children>
            <children xmi:type="notation:Shape" xmi:id="_6wzAOHEnEfCzXNzD7sOrXA" type="3027" element="_6wyZIHEnEfCzXNzD7sOrXA" fontName="Segoe UI" fillColor="14334392" lineColor="10710316">
              <children xmi:type="notation:DecorationNode" xmi:id="_6wznQHEnEfCzXNzD7sOrXA" type="5017"/>
              <layoutConstraint xmi:type="notation:Bounds" xmi:id="_6wzAOXEnEfCzXNzD7sOrXA" x="194" y="35" width="137" height="68"/>
            </children>
          </children>
          <styles xmi:type="notation:DescriptionStyle" xmi:id="_vGDzQ3EJEfCzXNzD7sOrXA"/>
          <styles xmi:type="notation:FontStyle" xmi:id="_vGDzRHEJEfCzXNzD7sOrXA" fontName="Segoe UI"/>
          <styles xmi:type="notation:LineStyle" xmi:id="_vGDzRXEJEfCzXNzD7sOrXA"/>
          <styles xmi:type="notation:FillStyle" xmi:id="_vGDzRnEJEfCzXNzD7sOrXA"/>
          <layoutConstraint xmi:type="notation:Bounds" xmi:id="_vGDzR3EJEfCzXNzD7sOrXA" x="48" y="10" width="1297" height="161"/>
        </children>
      </children>
      <styles xmi:type="notation:DescriptionStyle" xmi:id="_vGDzSHEJEfCzXNzD7sOrXA"/>
      <styles xmi:type="notation:FontStyle" xmi:id="_vGDzSXEJEfCzXNzD7sOrXA" fontName="Segoe UI"/>
      <styles xmi:type="notation:LineStyle" xmi:id="_vGDzSnEJEfCzXNzD7sOrXA"/>
      <styles xmi:type="notation:FillStyle" xmi:id="_vGDzS3EJEfCzXNzD7sOrXA"/>
      <layoutConstraint xmi:type="notation:Bounds" xmi:id="_vGDzTHEJEfCzXNzD7sOrXA" width="1320" height="250"/>
    </children>
    <styles xmi:type="notation:DiagramStyle" xmi:id="_vGDzTXEJEfCzXNzD7sOrXA"/>
    <edges xmi:type="notation:Connector" xmi:id="_vGDzTnEJEfCzXNzD7sOrXA" type="4001" element="_vGDzGHEJEfCzXNzD7sOrXA" source="_vGDzP3EJEfCzXNzD7sOrXA" target="_6wzAOHEnEfCzXNzD7sOrXA" roundedBendpointsRadius="10" routing="Rectilinear">
      <children xmi:type="notation:DecorationNode" xmi:id="_vGDzT3EJEfCzXNzD7sOrXA" type="6001">
        <layoutConstraint xmi:type="notation:Location" xmi:id="_vGDzUHEJEfCzXNzD7sOrXA" y="-10"/>
      </children>
      <styles xmi:type="notation:FontStyle" xmi:id="_vGDzUXEJEfCzXNzD7sOrXA" fontName="Segoe UI"/>
      <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_vGDzUnEJEfCzXNzD7sOrXA" points="[0, 0, 0, 0]$[0, 0, 0, 0]"/>
    </edges>
    <edges xmi:type="notation:Connector" xmi:id="_1d-to3ElEfCzXNzD7sOrXA" type="4001" element="_1d-toHElEfCzXNzD7sOrXA" source="_6wzAOHEnEfCzXNzD7sOrXA" target="_zHMdcHEaEfCzXNzD7sOrXA" roundedBendpointsRadius="10" routing="Rectilinear">
      <children xmi:type="notation:DecorationNode" xmi:id="_1d_UsHElEfCzXNzD7sOrXA" type="6001">
        <layoutConstraint xmi:type="notation:Location" xmi:id="_1d_UsXElEfCzXNzD7sOrXA" y="-10"/>
      </children>
      <styles xmi:type="notation:FontStyle" xmi:id="_1d-tpHElEfCzXNzD7sOrXA" fontName="Segoe UI"/>
      <bendpoints xmi:type="notation:RelativeBendpoints" xmi:id="_1d-tpXElEfCzXNzD7sOrXA" points="[0, 0, 0, 0]$[0, 0, 0, 0]"/>
    </edges>
  </notation:Diagram>
</xmi:XMI>
